// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	user "20dojo-online/pkg/server/domain/model/user"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepo is a mock of UserRepo interface
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// SelectUserByUserID mocks base method
func (m *MockUserRepo) SelectUserByUserID(userID string) (*user.UserL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByUserID", userID)
	ret0, _ := ret[0].(*user.UserL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByUserID indicates an expected call of SelectUserByUserID
func (mr *MockUserRepoMockRecorder) SelectUserByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByUserID", reflect.TypeOf((*MockUserRepo)(nil).SelectUserByUserID), userID)
}

// SelectUserByAuthToken mocks base method
func (m *MockUserRepo) SelectUserByAuthToken(userID string) (*user.UserL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByAuthToken", userID)
	ret0, _ := ret[0].(*user.UserL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByAuthToken indicates an expected call of SelectUserByAuthToken
func (mr *MockUserRepoMockRecorder) SelectUserByAuthToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByAuthToken", reflect.TypeOf((*MockUserRepo)(nil).SelectUserByAuthToken), userID)
}

// SelectUsersByHighScore mocks base method
func (m *MockUserRepo) SelectUsersByHighScore(limit, start int32) ([]*user.UserL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsersByHighScore", limit, start)
	ret0, _ := ret[0].([]*user.UserL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsersByHighScore indicates an expected call of SelectUsersByHighScore
func (mr *MockUserRepoMockRecorder) SelectUsersByHighScore(limit, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsersByHighScore", reflect.TypeOf((*MockUserRepo)(nil).SelectUsersByHighScore), limit, start)
}

// InsertUser mocks base method
func (m *MockUserRepo) InsertUser(user *user.UserL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserRepoMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepo)(nil).InsertUser), user)
}

// UpdateUserByUser mocks base method
func (m *MockUserRepo) UpdateUserByUser(user *user.UserL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByUser indicates an expected call of UpdateUserByUser
func (mr *MockUserRepoMockRecorder) UpdateUserByUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserByUser), user)
}

// UpdateUserByUserInTx mocks base method
func (m *MockUserRepo) UpdateUserByUserInTx(user *user.UserL, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByUserInTx", user, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByUserInTx indicates an expected call of UpdateUserByUserInTx
func (mr *MockUserRepoMockRecorder) UpdateUserByUserInTx(user, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByUserInTx", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserByUserInTx), user, tx)
}
