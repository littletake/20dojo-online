// Code generated by MockGen. DO NOT EDIT.
// Source: ./collection_item/collection_item.go

// Package mock_collection_item is a generated GoMock package.
package mock_collection_item

import (
	model "20dojo-online/pkg/server/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCItemRepository is a mock of CItemRepository interface
type MockCItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCItemRepositoryMockRecorder
}

// MockCItemRepositoryMockRecorder is the mock recorder for MockCItemRepository
type MockCItemRepositoryMockRecorder struct {
	mock *MockCItemRepository
}

// NewMockCItemRepository creates a new mock instance
func NewMockCItemRepository(ctrl *gomock.Controller) *MockCItemRepository {
	mock := &MockCItemRepository{ctrl: ctrl}
	mock.recorder = &MockCItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCItemRepository) EXPECT() *MockCItemRepositoryMockRecorder {
	return m.recorder
}

// SelectAllCollectionItem mocks base method
func (m *MockCItemRepository) SelectAllCollectionItem() ([]*model.CollectionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllCollectionItem")
	ret0, _ := ret[0].([]*model.CollectionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllCollectionItem indicates an expected call of SelectAllCollectionItem
func (mr *MockCItemRepositoryMockRecorder) SelectAllCollectionItem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllCollectionItem", reflect.TypeOf((*MockCItemRepository)(nil).SelectAllCollectionItem))
}
