// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTxRepository is a mock of TxRepository interface
type MockTxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTxRepositoryMockRecorder
}

// MockTxRepositoryMockRecorder is the mock recorder for MockTxRepository
type MockTxRepositoryMockRecorder struct {
	mock *MockTxRepository
}

// NewMockTxRepository creates a new mock instance
func NewMockTxRepository(ctrl *gomock.Controller) *MockTxRepository {
	mock := &MockTxRepository{ctrl: ctrl}
	mock.recorder = &MockTxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxRepository) EXPECT() *MockTxRepositoryMockRecorder {
	return m.recorder
}

// Transaction mocks base method
func (m *MockTxRepository) Transaction(f func(*sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction
func (mr *MockTxRepositoryMockRecorder) Transaction(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTxRepository)(nil).Transaction), f)
}
