// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_collection is a generated GoMock package.
package mock_collection

import (
	myerror "20dojo-online/pkg/server/interface/myerror"
	collection "20dojo-online/pkg/server/usecase/collection"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCollectionUseCase is a mock of CollectionUseCase interface
type MockCollectionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionUseCaseMockRecorder
}

// MockCollectionUseCaseMockRecorder is the mock recorder for MockCollectionUseCase
type MockCollectionUseCaseMockRecorder struct {
	mock *MockCollectionUseCase
}

// NewMockCollectionUseCase creates a new mock instance
func NewMockCollectionUseCase(ctrl *gomock.Controller) *MockCollectionUseCase {
	mock := &MockCollectionUseCase{ctrl: ctrl}
	mock.recorder = &MockCollectionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollectionUseCase) EXPECT() *MockCollectionUseCaseMockRecorder {
	return m.recorder
}

// GetCollectionSlice mocks base method
func (m *MockCollectionUseCase) GetCollectionSlice(userID string) ([]*collection.CollectionItemResult, *myerror.MyErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionSlice", userID)
	ret0, _ := ret[0].([]*collection.CollectionItemResult)
	ret1, _ := ret[1].(*myerror.MyErr)
	return ret0, ret1
}

// GetCollectionSlice indicates an expected call of GetCollectionSlice
func (mr *MockCollectionUseCaseMockRecorder) GetCollectionSlice(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionSlice", reflect.TypeOf((*MockCollectionUseCase)(nil).GetCollectionSlice), userID)
}
