// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_game is a generated GoMock package.
package mock_game

import (
	myerror "20dojo-online/pkg/server/interface/myerror"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGameUseCase is a mock of GameUseCase interface
type MockGameUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGameUseCaseMockRecorder
}

// MockGameUseCaseMockRecorder is the mock recorder for MockGameUseCase
type MockGameUseCaseMockRecorder struct {
	mock *MockGameUseCase
}

// NewMockGameUseCase creates a new mock instance
func NewMockGameUseCase(ctrl *gomock.Controller) *MockGameUseCase {
	mock := &MockGameUseCase{ctrl: ctrl}
	mock.recorder = &MockGameUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameUseCase) EXPECT() *MockGameUseCaseMockRecorder {
	return m.recorder
}

// UpdateCoinAndHighScore mocks base method
func (m *MockGameUseCase) UpdateCoinAndHighScore(userID string, score int32) (int32, *myerror.MyErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoinAndHighScore", userID, score)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(*myerror.MyErr)
	return ret0, ret1
}

// UpdateCoinAndHighScore indicates an expected call of UpdateCoinAndHighScore
func (mr *MockGameUseCaseMockRecorder) UpdateCoinAndHighScore(userID, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoinAndHighScore", reflect.TypeOf((*MockGameUseCase)(nil).UpdateCoinAndHighScore), userID, score)
}
