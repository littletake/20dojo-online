// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_gacha is a generated GoMock package.
package mock_gacha

import (
	user "20dojo-online/pkg/server/domain/model/user"
	usercollectionitem "20dojo-online/pkg/server/domain/model/usercollectionitem"
	myerror "20dojo-online/pkg/server/interface/myerror"
	gacha "20dojo-online/pkg/server/usecase/gacha"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGachaUseCase is a mock of GachaUseCase interface
type MockGachaUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGachaUseCaseMockRecorder
}

// MockGachaUseCaseMockRecorder is the mock recorder for MockGachaUseCase
type MockGachaUseCaseMockRecorder struct {
	mock *MockGachaUseCase
}

// NewMockGachaUseCase creates a new mock instance
func NewMockGachaUseCase(ctrl *gomock.Controller) *MockGachaUseCase {
	mock := &MockGachaUseCase{ctrl: ctrl}
	mock.recorder = &MockGachaUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGachaUseCase) EXPECT() *MockGachaUseCaseMockRecorder {
	return m.recorder
}

// Gacha mocks base method
func (m *MockGachaUseCase) Gacha(gachaTimes int32, userID string) ([]*gacha.GachaResult, *myerror.MyErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gacha", gachaTimes, userID)
	ret0, _ := ret[0].([]*gacha.GachaResult)
	ret1, _ := ret[1].(*myerror.MyErr)
	return ret0, ret1
}

// Gacha indicates an expected call of Gacha
func (mr *MockGachaUseCaseMockRecorder) Gacha(gachaTimes, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gacha", reflect.TypeOf((*MockGachaUseCase)(nil).Gacha), gachaTimes, userID)
}

// CreateItemRatioSlice mocks base method
func (m *MockGachaUseCase) CreateItemRatioSlice() *myerror.MyErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemRatioSlice")
	ret0, _ := ret[0].(*myerror.MyErr)
	return ret0
}

// CreateItemRatioSlice indicates an expected call of CreateItemRatioSlice
func (mr *MockGachaUseCaseMockRecorder) CreateItemRatioSlice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemRatioSlice", reflect.TypeOf((*MockGachaUseCase)(nil).CreateItemRatioSlice))
}

// CreateCItemSlice mocks base method
func (m *MockGachaUseCase) CreateCItemSlice() *myerror.MyErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCItemSlice")
	ret0, _ := ret[0].(*myerror.MyErr)
	return ret0
}

// CreateCItemSlice indicates an expected call of CreateCItemSlice
func (mr *MockGachaUseCaseMockRecorder) CreateCItemSlice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCItemSlice", reflect.TypeOf((*MockGachaUseCase)(nil).CreateCItemSlice))
}

// GetItems mocks base method
func (m *MockGachaUseCase) GetItems(gachaTimes int32) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", gachaTimes)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetItems indicates an expected call of GetItems
func (mr *MockGachaUseCaseMockRecorder) GetItems(gachaTimes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockGachaUseCase)(nil).GetItems), gachaTimes)
}

// CreateGachaResults mocks base method
func (m *MockGachaUseCase) CreateGachaResults(gettingItemSlice []string, hasGotItemMap map[string]bool, userID string) ([]*gacha.GachaResult, []*usercollectionitem.UserCollectionItem) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGachaResults", gettingItemSlice, hasGotItemMap, userID)
	ret0, _ := ret[0].([]*gacha.GachaResult)
	ret1, _ := ret[1].([]*usercollectionitem.UserCollectionItem)
	return ret0, ret1
}

// CreateGachaResults indicates an expected call of CreateGachaResults
func (mr *MockGachaUseCaseMockRecorder) CreateGachaResults(gettingItemSlice, hasGotItemMap, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGachaResults", reflect.TypeOf((*MockGachaUseCase)(nil).CreateGachaResults), gettingItemSlice, hasGotItemMap, userID)
}

// BulkInsertAndUpdate mocks base method
func (m *MockGachaUseCase) BulkInsertAndUpdate(newItemSlice []*usercollectionitem.UserCollectionItem, user *user.UserL, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertAndUpdate", newItemSlice, user, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertAndUpdate indicates an expected call of BulkInsertAndUpdate
func (mr *MockGachaUseCaseMockRecorder) BulkInsertAndUpdate(newItemSlice, user, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertAndUpdate", reflect.TypeOf((*MockGachaUseCase)(nil).BulkInsertAndUpdate), newItemSlice, user, tx)
}
