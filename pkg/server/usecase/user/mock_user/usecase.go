// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	user "20dojo-online/pkg/server/domain/model/user"
	myerror "20dojo-online/pkg/server/interface/myerror"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserUseCase is a mock of UserUseCase interface
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// GetUserByUserID mocks base method
func (m *MockUserUseCase) GetUserByUserID(userID string) (*user.UserL, *myerror.MyErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserID", userID)
	ret0, _ := ret[0].(*user.UserL)
	ret1, _ := ret[1].(*myerror.MyErr)
	return ret0, ret1
}

// GetUserByUserID indicates an expected call of GetUserByUserID
func (mr *MockUserUseCaseMockRecorder) GetUserByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserID", reflect.TypeOf((*MockUserUseCase)(nil).GetUserByUserID), userID)
}

// GetUserByAuthToken mocks base method
func (m *MockUserUseCase) GetUserByAuthToken(token string) (*user.UserL, *myerror.MyErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuthToken", token)
	ret0, _ := ret[0].(*user.UserL)
	ret1, _ := ret[1].(*myerror.MyErr)
	return ret0, ret1
}

// GetUserByAuthToken indicates an expected call of GetUserByAuthToken
func (mr *MockUserUseCaseMockRecorder) GetUserByAuthToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuthToken", reflect.TypeOf((*MockUserUseCase)(nil).GetUserByAuthToken), token)
}

// RegisterUserFromUserName mocks base method
func (m *MockUserUseCase) RegisterUserFromUserName(userName string) (string, *myerror.MyErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUserFromUserName", userName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*myerror.MyErr)
	return ret0, ret1
}

// RegisterUserFromUserName indicates an expected call of RegisterUserFromUserName
func (mr *MockUserUseCaseMockRecorder) RegisterUserFromUserName(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUserFromUserName", reflect.TypeOf((*MockUserUseCase)(nil).RegisterUserFromUserName), userName)
}

// UpdateUserName mocks base method
func (m *MockUserUseCase) UpdateUserName(userID, userName string) (*user.UserL, *myerror.MyErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserName", userID, userName)
	ret0, _ := ret[0].(*user.UserL)
	ret1, _ := ret[1].(*myerror.MyErr)
	return ret0, ret1
}

// UpdateUserName indicates an expected call of UpdateUserName
func (mr *MockUserUseCaseMockRecorder) UpdateUserName(userID, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserName", reflect.TypeOf((*MockUserUseCase)(nil).UpdateUserName), userID, userName)
}
